{"ast":null,"code":"import { GET_CONTACTS, ADD_CONTACT, DELETE_CONTACT, SET_CURRENT, CLEAR_CURRENT, UPDATE_CONTACT, FILTER_CONTACTS, CLEAR_FILTER, CONTACT_ERROR, CLEAR_CONTACTS } from '../types';\nexport default ((state, action) => {\n  switch (action.type) {\n    case GET_CONTACTS:\n      return { ...state,\n        contacts: action.payload,\n        loading: false\n      };\n\n    case ADD_CONTACT:\n      return { ...state,\n        contacts: [action.payload, ...state.contacts],\n        loading: false\n      };\n\n    case UPDATE_CONTACT:\n      return { ...state,\n        contacts: state.contacts.map(contact => contact._id === action.payload._id ? action.payload : contact),\n        loading: false\n      };\n\n    case DELETE_CONTACT:\n      return { ...state,\n        contacts: state.contacts.filter(contact => contact._id !== action.payload),\n        loading: false\n      };\n\n    case CLEAR_CONTACTS:\n      return { ...state,\n        contacts: null,\n        filtered: null,\n        error: null,\n        current: null\n      };\n\n    case SET_CURRENT:\n      return { ...state,\n        current: action.payload\n      };\n\n    case CLEAR_CURRENT:\n      return { ...state,\n        current: null\n      };\n\n    case FILTER_CONTACTS:\n      return { ...state,\n        filtered: state.contacts.filter(contact => {\n          const regex = new RegExp(`${action.payload}`, 'gi');\n          return contact.name.match(regex) || contact.email.match(regex);\n        })\n      };\n\n    case CLEAR_FILTER:\n      return { ...state,\n        filtered: null\n      };\n\n    case CONTACT_ERROR:\n      return { ...state,\n        error: action.payload\n      };\n\n    default:\n      return state;\n  }\n});","map":{"version":3,"sources":["/home/dgetachew/dawit/projects/practice/react-front-to-back/contact-keeper/client/src/context/contact/contactReducer.js"],"names":["GET_CONTACTS","ADD_CONTACT","DELETE_CONTACT","SET_CURRENT","CLEAR_CURRENT","UPDATE_CONTACT","FILTER_CONTACTS","CLEAR_FILTER","CONTACT_ERROR","CLEAR_CONTACTS","state","action","type","contacts","payload","loading","map","contact","_id","filter","filtered","error","current","regex","RegExp","name","match","email"],"mappings":"AAAA,SACIA,YADJ,EAEIC,WAFJ,EAGIC,cAHJ,EAIIC,WAJJ,EAKIC,aALJ,EAMIC,cANJ,EAOIC,eAPJ,EAQIC,YARJ,EASIC,aATJ,EAUIC,cAVJ,QAWO,UAXP;AAaA,gBAAe,CAACC,KAAD,EAAQC,MAAR,KAAmB;AAC9B,UAAQA,MAAM,CAACC,IAAf;AACI,SAAKZ,YAAL;AACI,aAAO,EACH,GAAGU,KADA;AAEHG,QAAAA,QAAQ,EAAEF,MAAM,CAACG,OAFd;AAGHC,QAAAA,OAAO,EAAE;AAHN,OAAP;;AAKJ,SAAKd,WAAL;AACI,aAAO,EACH,GAAGS,KADA;AAEHG,QAAAA,QAAQ,EAAE,CAACF,MAAM,CAACG,OAAR,EAAiB,GAAGJ,KAAK,CAACG,QAA1B,CAFP;AAGHE,QAAAA,OAAO,EAAE;AAHN,OAAP;;AAKJ,SAAKV,cAAL;AACI,aAAO,EACH,GAAGK,KADA;AAEHG,QAAAA,QAAQ,EAAEH,KAAK,CAACG,QAAN,CAAeG,GAAf,CAAmBC,OAAO,IAChCA,OAAO,CAACC,GAAR,KAAgBP,MAAM,CAACG,OAAP,CAAeI,GAA/B,GAAqCP,MAAM,CAACG,OAA5C,GAAsDG,OADhD,CAFP;AAKHF,QAAAA,OAAO,EAAE;AALN,OAAP;;AAOJ,SAAKb,cAAL;AACI,aAAO,EACH,GAAGQ,KADA;AAEHG,QAAAA,QAAQ,EAAEH,KAAK,CAACG,QAAN,CAAeM,MAAf,CACNF,OAAO,IAAIA,OAAO,CAACC,GAAR,KAAgBP,MAAM,CAACG,OAD5B,CAFP;AAKHC,QAAAA,OAAO,EAAE;AALN,OAAP;;AAOJ,SAAKN,cAAL;AACI,aAAO,EACH,GAAGC,KADA;AAEHG,QAAAA,QAAQ,EAAE,IAFP;AAGHO,QAAAA,QAAQ,EAAE,IAHP;AAIHC,QAAAA,KAAK,EAAE,IAJJ;AAKHC,QAAAA,OAAO,EAAE;AALN,OAAP;;AAOJ,SAAKnB,WAAL;AACI,aAAO,EACH,GAAGO,KADA;AAEHY,QAAAA,OAAO,EAAEX,MAAM,CAACG;AAFb,OAAP;;AAIJ,SAAKV,aAAL;AACI,aAAO,EACH,GAAGM,KADA;AAEHY,QAAAA,OAAO,EAAE;AAFN,OAAP;;AAIJ,SAAKhB,eAAL;AACI,aAAO,EACH,GAAGI,KADA;AAEHU,QAAAA,QAAQ,EAAEV,KAAK,CAACG,QAAN,CAAeM,MAAf,CAAsBF,OAAO,IAAI;AACvC,gBAAMM,KAAK,GAAG,IAAIC,MAAJ,CAAY,GAAEb,MAAM,CAACG,OAAQ,EAA7B,EAAgC,IAAhC,CAAd;AACA,iBAAOG,OAAO,CAACQ,IAAR,CAAaC,KAAb,CAAmBH,KAAnB,KAA6BN,OAAO,CAACU,KAAR,CAAcD,KAAd,CAAoBH,KAApB,CAApC;AACH,SAHS;AAFP,OAAP;;AAOJ,SAAKhB,YAAL;AACI,aAAO,EACH,GAAGG,KADA;AAEHU,QAAAA,QAAQ,EAAE;AAFP,OAAP;;AAIJ,SAAKZ,aAAL;AACI,aAAO,EACH,GAAGE,KADA;AAEHW,QAAAA,KAAK,EAAEV,MAAM,CAACG;AAFX,OAAP;;AAIJ;AACI,aAAOJ,KAAP;AAlER;AAoEH,CArED","sourcesContent":["import {\n    GET_CONTACTS,\n    ADD_CONTACT,\n    DELETE_CONTACT,\n    SET_CURRENT,\n    CLEAR_CURRENT,\n    UPDATE_CONTACT,\n    FILTER_CONTACTS,\n    CLEAR_FILTER,\n    CONTACT_ERROR,\n    CLEAR_CONTACTS\n} from '../types';\n\nexport default (state, action) => {\n    switch (action.type) {\n        case GET_CONTACTS:\n            return {\n                ...state,\n                contacts: action.payload,\n                loading: false\n            };\n        case ADD_CONTACT:\n            return {\n                ...state,\n                contacts: [action.payload, ...state.contacts],\n                loading: false\n            };\n        case UPDATE_CONTACT:\n            return {\n                ...state,\n                contacts: state.contacts.map(contact =>\n                    contact._id === action.payload._id ? action.payload : contact\n                ),\n                loading: false\n            };\n        case DELETE_CONTACT:\n            return {\n                ...state,\n                contacts: state.contacts.filter(\n                    contact => contact._id !== action.payload\n                ),\n                loading: false\n            };\n        case CLEAR_CONTACTS:\n            return {\n                ...state,\n                contacts: null,\n                filtered: null,\n                error: null,\n                current: null\n            };\n        case SET_CURRENT:\n            return {\n                ...state,\n                current: action.payload\n            };\n        case CLEAR_CURRENT:\n            return {\n                ...state,\n                current: null\n            };\n        case FILTER_CONTACTS:\n            return {\n                ...state,\n                filtered: state.contacts.filter(contact => {\n                    const regex = new RegExp(`${action.payload}`, 'gi');\n                    return contact.name.match(regex) || contact.email.match(regex);\n                })\n            };\n        case CLEAR_FILTER:\n            return {\n                ...state,\n                filtered: null\n            };\n        case CONTACT_ERROR:\n            return {\n                ...state,\n                error: action.payload\n            };\n        default:\n            return state;\n    }\n};"]},"metadata":{},"sourceType":"module"}